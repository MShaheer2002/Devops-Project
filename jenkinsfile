pipeline {
  agent any

  environment {
    ARM_SUBSCRIPTION_ID = credentials('azure-subscription-id')
    ARM_CLIENT_ID       = credentials('azure-client-id')
    ARM_CLIENT_SECRET   = credentials('azure-client-secret')
    ARM_TENANT_ID       = credentials('azure-tenant-id')
  }

  stages {
    stage('Create .tfvars file') {
      steps {
        withCredentials([file(credentialsId: 'ssh-public-key', variable: 'PUBKEY_FILE')]) {
          dir('terraform') {
            sh '''
              PUBKEY=$(cat $PUBKEY_FILE)
              cat > terraform.auto.tfvars <<EOF
subscription_id     = "${ARM_SUBSCRIPTION_ID}"
client_id           = "${ARM_CLIENT_ID}"
client_secret       = "${ARM_CLIENT_SECRET}"
tenant_id           = "${ARM_TENANT_ID}"
vm_admin_password   = "P@ssw0rd"
ssh_public_key      = "$PUBKEY"
EOF
            '''
          }
        }
      }
    }

    stage('Terraform Init') {
      steps {
        dir('terraform') {
          sh 'terraform init'
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        dir('terraform') {
          sh 'terraform apply -auto-approve'
        }
      }
    }

    stage('Ansible Install Web Server') {
      steps {
        withCredentials([sshUserPrivateKey(
          credentialsId: 'vm-ssh-key',
          keyFileVariable: 'SSH_KEY',
          usernameVariable: 'SSH_USERNAME'
        )]) {
          dir('ansible') {
            sh '''
              mkdir -p ~/.ssh
              cp "${SSH_KEY}" ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
              ansible-playbook -i ../terraform/inventory install_web.yml
            '''
          }
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        script {
          def ip = sh(
            script: 'terraform -chdir=terraform output -raw public_ip', 
            returnStdout: true
          ).trim()
          
          // Add retry logic with timeout
          def status = sh(
            script: "curl -s -o /dev/null -w '%{http_code}' --retry 5 --retry-delay 10 --max-time 30 http://${ip}",
            returnStdout: true
          ).trim()
          
          if (status != "200") {
            error("Verification failed - HTTP status ${status}")
          } else {
            echo "Deployment verified successfully"
          }
        }
      }
    }
  }

  post {
    always {
      dir('terraform') {
        sh 'terraform output'
      }
      cleanWs()
    }
    failure {
      emailext (
        subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: """Check console output at ${env.BUILD_URL}console""",
        to: 'devops-team@example.com'
      )
    }
  }
}